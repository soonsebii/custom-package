--- a/plugins/audio_alsa.c
+++ b/plugins/audio_alsa.c
@@ -28,6 +28,7 @@
 #include <unistd.h>
 #include <limits.h>
 #include <signal.h>
+#include <sys/param.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 
@@ -92,9 +93,54 @@
 #define U8_ABSDIFF(s1,s2) (((s1) >= (s2)) ? ((s1) - (s2)) : ((s2) - (s1)))
 
 /* Forward declarations */
+static int audio_alsa_init(void);
 int audio_alsa_deinit(void);
 static void alsa_sig_io(snd_async_handler_t * h);
 
+static int mywaitfordata(long maxusec)
+{
+	int  ret, poll_ms;
+	struct timeval start, now;
+
+	while (1) {
+		do {
+			struct pollfd pfd  = {
+				.fd = drv.fd, .events = POLLIN, .revents = 0
+			};
+
+			gettimeofday(&start, NULL);
+			poll_ms = MAX(0, maxusec / 1000);
+			if (drv.fd == -1) {
+				/* try to reconnect */
+				if (poll_ms > 1000 || poll_ms == 0)
+					poll_ms = 1000;
+			}
+			ret = poll(&pfd, 1, poll_ms == 0 ? -1 : poll_ms);
+			if (ret == -1 && errno != EINTR) {
+				log_perror_err("poll() failed");
+				continue;
+			}
+			gettimeofday(&now, NULL);
+			if (maxusec > 0) {
+				if (ret == 0 || time_elapsed(&start, &now) >= maxusec)
+					return 0;
+				maxusec -= time_elapsed(&start, &now);
+			}
+		} while (ret == -1 && errno == EINTR);
+
+		if (drv.fd == -1) {
+			loglevel_t saved_level = loglevel;
+
+			lirc_log_setlevel(LIRC_NOLOG);
+			audio_alsa_init();
+			lirc_log_setlevel(saved_level);
+		} else if (ret >= 1) {
+			/* we will read later */
+			return 1;
+		}
+	}
+}
+
 static int alsa_error(const char *errstr, int errcode)
 {
 	if (errcode < 0) {
@@ -151,7 +197,7 @@
 	return 0;
 }
 
-int audio_alsa_init()
+static int audio_alsa_init(void)
 {
 	int fd, err;
 	char *pcm_rate;
@@ -497,7 +543,7 @@
 	lirc_t data;
 	int ret;
 
-	if (!waitfordata((long)timeout))
+	if (!mywaitfordata((long)timeout))
 		return 0;
 
 	ret = read(drv.fd, &data, sizeof(data));
